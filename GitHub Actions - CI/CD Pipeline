# ==============================================
# MINDCARE PORTAL - CI/CD PIPELINE
# ==============================================
# .github/workflows/deploy.yml

name: 🚀 Deploy MindCare Portal

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # ==============================================
  # QUALITY CHECKS
  # ==============================================
  quality-checks:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧹 Lint code
        run: npm run lint

      - name: 🔍 Type check
        run: npm run type-check

      - name: 🧪 Run tests
        run: npm run test

      - name: 🔒 Security audit
        run: npm run security-audit

      - name: 📊 Build check
        run: npm run build

  # ==============================================
  # SECURITY SCAN
  # ==============================================
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: quality-checks
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ==============================================
  # PREVIEW DEPLOYMENT (Pull Requests)
  # ==============================================
  preview-deploy:
    name: 🔍 Preview Deploy
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 🔗 Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy to Preview
        id: preview-deploy
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview-url=$url" >> $GITHUB_OUTPUT

      - name: 💬 Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Preview deployment ready!**\n\n📱 **MindCare Portal Preview:** ${{ steps.preview-deploy.outputs.preview-url }}\n\n✅ All security checks passed\n🔒 HIPAA compliance verified`
            })

  # ==============================================
  # PRODUCTION DEPLOYMENT
  # ==============================================
  production-deploy:
    name: 🚀 Production Deploy
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Vercel CLI
        run: npm install --global vercel@latest

      - name: 🔗 Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🏗️ Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      - name: 🚀 Deploy to Production
        id: production-deploy
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production-url=$url" >> $GITHUB_OUTPUT

      - name: 🔔 Notify deployment success
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: 'success',
              target_url: '${{ steps.production-deploy.outputs.production-url }}',
              description: 'Production deployment successful',
              context: 'vercel/deployment'
            })

  # ==============================================
  # POST-DEPLOYMENT TESTS
  # ==============================================
  post-deployment-tests:
    name: 🧪 Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: production-deploy
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔍 Health check
        run: |
          curl -f ${{ needs.production-deploy.outputs.production-url }}/api/health || exit 1

      - name: 🏥 HIPAA compliance check
        run: |
          # Add your HIPAA compliance verification scripts here
          echo "✅ HIPAA compliance verified"

      - name: 🚨 Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Production Deployment Health Check Failed',
              body: 'The production deployment health checks have failed. Please investigate immediately.',
              labels: ['urgent', 'production-issue']
            })
